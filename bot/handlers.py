import asyncio
import re
from datetime import datetime, timezone, timedelta
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.services import (
    save_user, save_workout_progress,
    get_user, check_achievements,
    get_all_users, get_progress
)
from bot.buttons import goal_buttons, control_buttons, resume_buttons, progress_buttons
from bot.workouts import workout_plans
from bot.video_links import video_links
from aiogram.exceptions import TelegramBadRequest

router = Router()

class Form(StatesGroup):
    goal = State()
    height = State()
    weight = State()
    age = State()
    workout_choice = State()
    duration = State()
    rest = State()
    workout = State()

paused_workouts = {}

def get_explanation_button(exercise_name: str):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üîç –ü–æ—è—Å–Ω–µ–Ω–Ω—è",
            callback_data=f"explain:{exercise_name}"
        )
    ]])

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "*–ü—Ä–∏–≤—ñ—Ç, —è —Ç–≤—ñ–π —Ñ—ñ—Ç–Ω–µ—Å-–±–æ—Ç!*\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏ —ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏.\n"
        "–í–∏–±–µ—Ä–∏ –º–µ—Ç—É –Ω–∏–∂—á–µ ‚¨á",
        reply_markup=goal_buttons,
        parse_mode="Markdown"
    )
    await state.set_state(Form.goal)

@router.message(Form.goal, F.text.in_(["üî• –°—Ö—É–¥–Ω–µ–Ω–Ω—è", "üí™ –ù–∞–±—ñ—Ä –º–∞—Å–∏", "üèÉ –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", "‚ö° –°–∏–ª–∞"]))
async def process_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å *–∑—Ä—ñ—Å—Ç* (—É —Å–º):", parse_mode="Markdown")
    await state.set_state(Form.height)

@router.message(Form.goal)
async def invalid_goal(message: types.Message):
    await message.answer("‚ö† –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–µ—Ç–∏!", parse_mode="Markdown")

@router.message(Form.height, F.text.isdigit())
async def process_height(message: types.Message, state: FSMContext):
    height = int(message.text)
    if 100 <= height <= 250:
        await state.update_data(height=height)
        await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å *–≤–∞–≥—É* (—É –∫–≥):", parse_mode="Markdown")
        await state.set_state(Form.weight)
    else:
        await message.answer("‚ùå –†–µ–∞–ª—å–Ω–∏–π –∑—Ä—ñ—Å—Ç: 100‚Äì250 —Å–º", parse_mode="Markdown")

@router.message(Form.height)
async def invalid_height(message: types.Message):
    await message.answer("üö´ –í–≤–µ–¥–∏ *—á–∏—Å–ª–æ* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 175).", parse_mode="Markdown")

@router.message(Form.weight, F.text.isdigit())
async def process_weight(message: types.Message, state: FSMContext):
    weight = int(message.text)
    if 30 <= weight <= 200:
        await state.update_data(weight=weight)
        await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å *–≤—ñ–∫*:", parse_mode="Markdown")
        await state.set_state(Form.age)
    else:
        await message.answer("‚ùå –†–µ–∞–ª—å–Ω–∞ –≤–∞–≥–∞: 30‚Äì200 –∫–≥", parse_mode="Markdown")

@router.message(Form.weight)
async def invalid_weight(message: types.Message):
    await message.answer("üö´ –í–≤–µ–¥–∏ *—á–∏—Å–ª–æ* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 70).", parse_mode="Markdown")

@router.message(Form.age, F.text.isdigit())
async def process_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if 10 <= age <= 100:
        await state.update_data(age=age)
        data = await state.get_data()
        user = message.from_user
        username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
        if not username:
            username = f"user_{user.id}"
        save_user(user.id, username, data["goal"], data["height"], data["weight"], age)
        await message.answer(
            f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
            f"üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* @{username}\n"
            f"üéØ *–ú–µ—Ç–∞:* {data['goal']}\n"
            f"üìè *–ó—Ä—ñ—Å—Ç:* {data['height']} —Å–º\n"
            f"‚öñ *–í–∞–≥–∞:* {data['weight']} –∫–≥\n"
            f"üéÇ *–í—ñ–∫:* {age} —Ä–æ–∫—ñ–≤\n\n"
            f"üîπ –í–≤–µ–¥–∏ /workout –¥–ª—è —Å—Ç–∞—Ä—Ç—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
            parse_mode="Markdown"
        )
        await state.clear()
    else:
        await message.answer("‚ùå –í—ñ–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 100 —Ä–æ–∫—ñ–≤", parse_mode="Markdown")

@router.message(Form.age)
async def invalid_age(message: types.Message):
    await message.answer("üö´ –í–≤–µ–¥–∏ *—á–∏—Å–ª–æ* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25).", parse_mode="Markdown")

@router.message(Command("workout"))
async def start_workout(message: types.Message, state: FSMContext):
    user_data = get_user(message.from_user.id)
    if not user_data:
        await message.answer("üö´ –í–∏ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥—ñ—Ç—å /start.")
        return

    goal = user_data["goal"]
    workouts = workout_plans[goal]["daily_workouts"]
    buttons = [[types.KeyboardButton(text=w.split("\n")[0].replace('üèã ', ''))] for w in workouts]
    workout_choice_buttons = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("üîπ –û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=workout_choice_buttons)
    await state.set_state(Form.workout_choice)

@router.message(Form.workout_choice)
async def process_workout_choice(message: types.Message, state: FSMContext):
    user_data = get_user(message.from_user.id)
    goal = user_data["goal"]
    workouts = workout_plans[goal]["daily_workouts"]
    selected_workout = next((w for w in workouts if message.text in w), None)

    if selected_workout:
        await state.update_data(workout=selected_workout, user_id=message.from_user.id)
        await message.answer("‚è± –í–≤–µ–¥–∏ *—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤–ø—Ä–∞–≤* —É —Å–µ–∫—É–Ω–¥–∞—Ö (–≤—ñ–¥ 5 –¥–æ 120):", parse_mode="Markdown")
        await state.set_state(Form.duration)
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

@router.message(Form.duration)
async def set_custom_duration(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("üö´ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 5 –¥–æ 120.")
        return
    duration = int(message.text)
    if 5 <= duration <= 120:
        await state.update_data(custom_duration=duration)
        await message.answer("üîÑ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ *—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É* —É —Å–µ–∫—É–Ω–¥–∞—Ö (–≤—ñ–¥ 5 –¥–æ 120):", parse_mode="Markdown")
        await state.set_state(Form.rest)
    else:
        await message.answer("üö´ –ß–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 5 –¥–æ 120.")

@router.message(Form.rest)
async def set_custom_rest(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("üö´ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 5 –¥–æ 120.")
        return
    rest = int(message.text)
    if 5 <= rest <= 120:
        await state.update_data(custom_rest=rest)
        data = await state.get_data()
        workout = data["workout"]
        await message.answer(f"{workout}\nüî¥ –ù–∞—Ç–∏—Å–Ω–∏ –°—Ç–∞—Ä—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫—É", reply_markup=control_buttons)
        await state.set_state(Form.workout)
    else:
        await message.answer("üö´ –ß–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 5 –¥–æ 120.")

@router.message(Form.workout, F.text == "üî¥ –°—Ç–∞—Ä—Ç")
async def start_timer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    workout = data["workout"]
    user_id = data["user_id"]
    exercise_duration = data.get("custom_duration", 30)
    rest_duration = data.get("custom_rest", 10)

    exercises = re.findall(r"‚úÖ ([^\n]+)", workout)
    total_duration = 0

    paused_workouts[user_id] = {
        "paused": False,
        "stopped": False,
        "remaining_time": 0,
        "remaining_rest": 0,
        "mode": None,
        "message_id": None,
        "resume_requested": False
    }

    for idx, exercise in enumerate(exercises):
        await message.answer(f"üîπ <b>{exercise}</b>", parse_mode="HTML", reply_markup=get_explanation_button(exercise))
        remaining = paused_workouts[user_id]["remaining_time"] or exercise_duration
        paused_workouts[user_id].update({"mode": "exercise"})

        timer_msg = await message.answer(f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining} —Å–µ–∫", parse_mode="HTML")
        paused_workouts[user_id]["message_id"] = timer_msg.message_id

        while remaining > 0:
            await asyncio.sleep(1)

            if paused_workouts[user_id]["stopped"]:
                await message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
                await state.clear()
                paused_workouts.pop(user_id, None)
                return

            if paused_workouts[user_id]["paused"]:
                paused_workouts[user_id]["remaining_time"] = remaining
                while paused_workouts[user_id]["paused"] and not paused_workouts[user_id].get("resume_requested"):
                    await asyncio.sleep(0.5)
                paused_workouts[user_id]["resume_requested"] = False
                continue

            remaining -= 1
            try:
                await timer_msg.edit_text(f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining} —Å–µ–∫", parse_mode="HTML")
            except TelegramBadRequest:
                pass

        paused_workouts[user_id]["remaining_time"] = 0
        total_duration += exercise_duration

        # –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫
        if idx < len(exercises) - 1:
            rest = paused_workouts[user_id]["remaining_rest"] or rest_duration
            paused_workouts[user_id].update({"mode": "rest"})
            rest_msg = await message.answer(f"‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ {rest} —Å–µ–∫", parse_mode="HTML")
            paused_workouts[user_id]["message_id"] = rest_msg.message_id

            while rest > 0:
                await asyncio.sleep(1)

                if paused_workouts[user_id]["stopped"]:
                    await message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
                    await state.clear()
                    paused_workouts.pop(user_id, None)
                    return

                if paused_workouts[user_id]["paused"]:
                    paused_workouts[user_id]["remaining_rest"] = rest
                    while paused_workouts[user_id]["paused"] and not paused_workouts[user_id].get("resume_requested"):
                        await asyncio.sleep(0.5)
                    paused_workouts[user_id]["resume_requested"] = False
                    continue

                rest -= 1
                try:
                    await rest_msg.edit_text(f"‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ {rest} —Å–µ–∫")
                except TelegramBadRequest:
                    pass

            paused_workouts[user_id]["remaining_rest"] = 0
            total_duration += rest_duration

    save_workout_progress(user_id, workout, total_duration)
    achievements = check_achievements(user_id)
    achievement_text = "\n".join([f"üèÖ *–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è!* {a}" for a in achievements]) if achievements else ""
    await message.answer(
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {total_duration // 60} —Ö–≤ {total_duration % 60} —Å–µ–∫\n{achievement_text}",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await state.clear()
    paused_workouts.pop(user_id, None)

@router.message(Form.workout, F.text == "‚èπ –°—Ç–æ–ø")
async def stop_workout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in paused_workouts:
        paused_workouts[user_id]["stopped"] = True
    else:
        await message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–µ.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()

@router.message(Form.workout, F.text == "‚è∏Ô∏è –ü–∞—É–∑–∞")
async def pause_workout(message: types.Message):
    user_id = message.from_user.id
    if user_id in paused_workouts:
        paused_workouts[user_id]["paused"] = True
        await message.answer(
            "‚è∏Ô∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–∞—É–∑—ñ. –ù–∞—Ç–∏—Å–Ω–∏ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.",
            reply_markup=resume_buttons
        )
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=paused_workouts[user_id]["message_id"]
            )
        except TelegramBadRequest:
            pass
    else:
        await message.answer("‚ö† –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ.")

@router.message(Form.workout, F.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
async def resume_workout(message: types.Message):
    user_id = message.from_user.id
    if user_id not in paused_workouts or not paused_workouts[user_id]["paused"]:
        await message.answer("‚ö† –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑ –Ω–µ –Ω–∞ –ø–∞—É–∑—ñ.")
        return

    paused_workouts[user_id]["paused"] = False
    paused_workouts[user_id]["resume_requested"] = True

    try:
        msg_id = paused_workouts[user_id].get("message_id")
        if msg_id:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
    except TelegramBadRequest:
        pass

    # –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
    mode = paused_workouts[user_id].get("mode")
    remaining = paused_workouts[user_id].get("remaining_time" if mode == "exercise" else "remaining_rest", 0)

    text = f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining} —Å–µ–∫" if mode == "exercise" else f"‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ {remaining} —Å–µ–∫"
    timer_msg = await message.answer(text, parse_mode="HTML")
    paused_workouts[user_id]["message_id"] = timer_msg.message_id

    await message.answer("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!", reply_markup=control_buttons)

    # üîÅ –î–∏–Ω–∞–º—ñ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    while remaining > 0:
        await asyncio.sleep(1)

        if paused_workouts[user_id]["paused"]:
            if mode == "exercise":
                paused_workouts[user_id]["remaining_time"] = remaining
            else:
                paused_workouts[user_id]["remaining_rest"] = remaining
            return

        if paused_workouts[user_id]["stopped"]:
            await message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
            paused_workouts.pop(user_id, None)
            return

        remaining -= 1
        try:
            await timer_msg.edit_text(
                f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining} —Å–µ–∫" if mode == "exercise" else f"‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ {remaining} —Å–µ–∫",
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            pass

    # –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
    if mode == "exercise":
        paused_workouts[user_id]["remaining_time"] = 0
    else:
        paused_workouts[user_id]["remaining_rest"] = 0

@router.callback_query(F.data.startswith("explain:"))
async def explain_exercise_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    exercise = callback.data.split("explain:")[1]
    video_url = video_links.get(exercise)

    if user_id in paused_workouts:
        paused_workouts[user_id]["paused"] = True
        try:
            msg_id = paused_workouts[user_id].get("message_id")
            if msg_id:
                await callback.message.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=msg_id
                )
        except TelegramBadRequest:
            pass

    if video_url:
        await callback.message.answer(
            f"‚ñ∂Ô∏è –ü–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ <b>{exercise}</b>:\n<a href='{video_url}'>{video_url}</a>",
            parse_mode="HTML",
            disable_web_page_preview=False,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–ø—Ä–∞–≤—É",
                    callback_data="resume_exercise"
                )
            ]])
        )
    else:
        await callback.message.answer("‚ùå –í—ñ–¥–µ–æ –¥–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –ø–æ–∫–∏ —â–æ –≤—ñ–¥—Å—É—Ç–Ω—î.")
    await callback.answer()

@router.callback_query(F.data == "resume_exercise")
async def resume_exercise_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in paused_workouts:
        await callback.answer("‚ö† –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    paused_workouts[user_id]["paused"] = False
    paused_workouts[user_id]["resume_requested"] = True

    try:
        msg_id = paused_workouts[user_id].get("message_id")
        if msg_id:
            await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
    except TelegramBadRequest:
        pass

    mode = paused_workouts[user_id].get("mode")
    remaining = paused_workouts[user_id].get("remaining_time" if mode == "exercise" else "remaining_rest", 0)

    text = f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining} —Å–µ–∫" if mode == "exercise" else f"‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ {remaining} —Å–µ–∫"
    timer_msg = await callback.message.answer(text, parse_mode="HTML")
    paused_workouts[user_id]["message_id"] = timer_msg.message_id

    await callback.message.answer("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–ø—Ä–∞–≤—É!", reply_markup=control_buttons)
    await callback.answer()

    # üîÅ –î–∏–Ω–∞–º—ñ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    while remaining > 0:
        await asyncio.sleep(1)

        if paused_workouts[user_id]["paused"]:
            if mode == "exercise":
                paused_workouts[user_id]["remaining_time"] = remaining
            else:
                paused_workouts[user_id]["remaining_rest"] = remaining
            return

        if paused_workouts[user_id]["stopped"]:
            await callback.message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
            paused_workouts.pop(user_id, None)
            return

        remaining -= 1
        try:
            await timer_msg.edit_text(
                f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining} —Å–µ–∫" if mode == "exercise" else f"‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ {remaining} —Å–µ–∫",
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            pass

    if mode == "exercise":
        paused_workouts[user_id]["remaining_time"] = 0
    else:
        paused_workouts[user_id]["remaining_rest"] = 0

@router.message(Command("progress"))
async def choose_progress_period(message: types.Message):
    await message.answer("üîé –û–±–µ—Ä–∏ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ–≥—Ä–µ—Å—É:", reply_markup=progress_buttons)

@router.message(F.text.in_([
    "üìÖ 7 –¥–Ω—ñ–≤", "üìÖ 14 –¥–Ω—ñ–≤", "üìÖ 30 –¥–Ω—ñ–≤",
    "üìÜ 6 –º—ñ—Å—è—Ü—ñ–≤", "üìÖ 1 —Ä—ñ–∫", "üìñ –£–≤–µ—Å—å —á–∞—Å"
]))
async def show_progress_by_period(message: types.Message):
    from datetime import datetime, timedelta
    from collections import Counter

    def format_time(mins, secs):
        if mins == 0 and secs == 0:
            return "‚Äî"
        if mins >= 60:
            hours, mins = divmod(mins, 60)
            return f"{hours} –≥–æ–¥ {mins} —Ö–≤ {secs} —Å–µ–∫"
        else:
            return f"{mins} —Ö–≤ {secs} —Å–µ–∫"

    user_id = message.from_user.id
    workouts = get_progress(user_id)
    if not workouts:
        await message.answer("‚ùå –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.")
        return

    now = datetime.now()
    period_text = message.text
    periods = {
        "üìÖ 7 –¥–Ω—ñ–≤": timedelta(days=7),
        "üìÖ 14 –¥–Ω—ñ–≤": timedelta(days=14),
        "üìÖ 30 –¥–Ω—ñ–≤": timedelta(days=30),
        "üìÜ 6 –º—ñ—Å—è—Ü—ñ–≤": timedelta(days=182),
        "üìÖ 1 —Ä—ñ–∫": timedelta(days=365),
        "üìñ –£–≤–µ—Å—å —á–∞—Å": None
    }

    cutoff = now - periods[period_text] if periods[period_text] else None

    filtered = [
        w for w in workouts
        if w.get("timestamp") and isinstance(w.get("timestamp"), datetime)
        and (not cutoff or w["timestamp"].replace(tzinfo=None) >= cutoff)
    ]

    if not filtered:
        await message.answer("‚ÑπÔ∏è –ó–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–µ –±—É–ª–æ.")
        return

    durations = [w.get("duration", 0) for w in filtered if w.get("duration", 0) > 0]
    total_duration = sum(durations)
    total_workouts = len(durations)
    avg_duration = total_duration // total_workouts if total_workouts else 0
    min_duration = min(durations) if durations else 0
    max_duration = max(durations) if durations else 0

    total_min, total_sec = divmod(total_duration, 60)
    avg_min, avg_sec = divmod(avg_duration, 60)
    min_min, min_sec = divmod(min_duration, 60)
    max_min, max_sec = divmod(max_duration, 60)

    first = filtered[-1]["timestamp"]
    last = filtered[0]["timestamp"]

    active_days = sorted(set(w["timestamp"].date() for w in filtered))
    if cutoff:
        period_days = (now.date() - cutoff.date()).days
    else:
        period_days = (last.date() - first.date()).days
    period_days = max(period_days, 1)
    active_day_count = len(active_days)
    active_percent = round((active_day_count / period_days) * 100)

    # üî• –†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    active_days_score = active_day_count / period_days
    workouts_per_day = total_workouts / period_days
    workouts_score = min(workouts_per_day, 1.0)

    total_minutes = total_duration / 60
    total_minutes_score = min(total_minutes / (period_days * 10), 1.0)

    avg_minutes = avg_duration / 60
    avg_minutes_score_for_activity = min(avg_minutes / 20, 1.0)

    score = (
        0.4 * active_days_score +
        0.2 * workouts_score +
        0.2 * total_minutes_score +
        0.2 * avg_minutes_score_for_activity
    )

    if score >= 0.75:
        activity = "üîµ –í–∏—Å–æ–∫–∞"
    elif score >= 0.4:
        activity = "üü° –°–µ—Ä–µ–¥–Ω—è"
    else:
        activity = "üî¥ –ù–∏–∑—å–∫–∞"

    # üìà –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
    avg_minutes_per_active_day = total_minutes / active_day_count if active_day_count else 0
    avg_minutes_score = min(avg_minutes_per_active_day / 20, 1.0)
    stability = round(active_days_score * avg_minutes_score, 2)

    if stability >= 0.7:
        stability_level = "üîµ –í–∏—Å–æ–∫–∞"
    elif stability >= 0.4:
        stability_level = "üü° –°–µ—Ä–µ–¥–Ω—è"
    else:
        stability_level = "üî¥ –ù–∏–∑—å–∫–∞"

    # ‚ûï –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
    weekday_map = {
        0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±", 6: "–ù–¥"
    }
    weekdays = [w["timestamp"].weekday() for w in filtered]
    weekday_counts = Counter(weekdays)
    top_days = ", ".join(weekday_map[d] for d, _ in weekday_counts.most_common(2)) if weekday_counts else "‚Äî"

    streak = max_streak = 1
    for i in range(1, len(active_days)):
        if (active_days[i] - active_days[i - 1]).days == 1:
            streak += 1
            max_streak = max(max_streak, streak)
        else:
            streak = 1
    max_streak = max_streak if active_day_count > 0 else 0

    max_gap = 0
    for i in range(1, len(active_days)):
        gap = (active_days[i] - active_days[i - 1]).days - 1
        if gap > max_gap:
            max_gap = gap

    short_count = sum(1 for d in durations if d <= 5 * 60)
    short_percent = round((short_count / total_workouts) * 100) if total_workouts else 0

    await message.answer(
        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å –∑–∞ {period_text}:</b>\n\n"
        f"üîÅ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:</b> {total_workouts}\n"
        f"üìÖ <b>–î–Ω—ñ–≤ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏:</b> {active_day_count} –∑ {period_days} –¥–Ω—ñ–≤ ({active_percent}%)\n"
        f"‚è±Ô∏è <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {format_time(total_min, total_sec)}\n"
        f"üìä <b>–°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {format_time(avg_min, avg_sec)}\n"
        f"üî∏ <b>–ù–∞–π–∫–æ—Ä–æ—Ç—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b> {format_time(min_min, min_sec)}\n"
        f"üîπ <b>–ù–∞–π–¥–æ–≤—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b> {format_time(max_min, max_sec)}\n"
        f"üóìÔ∏è <b>–ü–µ—Ä—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b> {first.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìÖ <b>–û—Å—Ç–∞–Ω–Ω—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b> {last.strftime('%d.%m.%Y %H:%M')}\n"
        f"üî• <b>–†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:</b> {activity} ({round(score, 2)})\n\n"
        f"üìÜ <b>–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –¥–Ω—ñ:</b> {top_days}\n"
        f"üîÅ <b>–ú–∞–∫—Å. —Å—Ç—Ä—ñ–∫:</b> {max_streak} –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å\n"
        f"‚õî <b>–ú–∞–∫—Å. –ø–µ—Ä–µ—Ä–≤–∞:</b> {max_gap} –¥–Ω—ñ–≤ –±–µ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        f"ü§è <b>–ö–æ—Ä–æ—Ç–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</b> {short_percent}%\n"
        f"üìà <b>–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ:</b> {stability} ({stability_level})",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫", callback_data="explain_metrics")]
            ]
        )
    )

@router.callback_query(F.data == "explain_metrics")
async def explain_metrics_callback(callback: types.CallbackQuery):
    await callback.message.answer(
        text=(
            "<b>üìä –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫:</b>\n\n"

            "üîÅ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å</b> ‚Äî —Å–∫—ñ–ª—å–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –ø–µ—Ä—ñ–æ–¥.\n"
            "üìÖ <b>–î–Ω—ñ–≤ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏</b> ‚Äî —É —Å–∫—ñ–ª—å–∫–æ—Ö –¥–Ω—è—Ö –±—É–ª–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n\n"

            "‚è±Ô∏è <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å</b> ‚Äî —Å—É–º–∞—Ä–Ω–∏–π —á–∞—Å —É—Å—ñ—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.\n"
            "üìä <b>–°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å</b> ‚Äî —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n"
            "üî∏ <b>–ù–∞–π–∫–æ—Ä–æ—Ç—à–µ</b> ‚Äî –Ω–∞–π–º–µ–Ω—à–∏–π –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –∑–∞–ø–∏—Å.\n"
            "üîπ <b>–ù–∞–π–¥–æ–≤—à–µ</b> ‚Äî –Ω–∞–π–¥–æ–≤—à–∏–π –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –∑–∞–ø–∏—Å.\n\n"

            "üóìÔ∏è <b>–ü–µ—Ä—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</b> ‚Äî –¥–∞—Ç–∞ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É –ø–µ—Ä—ñ–æ–¥—ñ.\n"
            "üìÖ <b>–û—Å—Ç–∞–Ω–Ω—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</b> ‚Äî –¥–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n\n"

            "üî• <b>–†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</b> ‚Äî –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—Ç–æ —Ç–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ –≤–∏ —Ç—Ä–µ–Ω—É–≤–∞–ª–∏—Å—å:\n"
            "üîµ –í–∏—Å–æ–∫–∞  üü° –°–µ—Ä–µ–¥–Ω—è  üî¥ –ù–∏–∑—å–∫–∞\n\n"

            "üìà <b>–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ</b> ‚Äî –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –π —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–∏ —Ç—Ä–µ–Ω—É–≤–∞–ª–∏—Å—å:\n"
            "üîµ –í–∏—Å–æ–∫–∞  üü° –°–µ—Ä–µ–¥–Ω—è  üî¥ –ù–∏–∑—å–∫–∞\n\n"

            "üìÜ <b>–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –¥–Ω—ñ</b> ‚Äî –¥–Ω—ñ —Ç–∏–∂–Ω—è –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.\n"
            "üîÅ <b>–ú–∞–∫—Å. —Å—Ç—Ä—ñ–∫</b> ‚Äî –Ω–∞–π–¥–æ–≤—à–∞ —Å–µ—Ä—ñ—è –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏.\n"
            "‚õî <b>–ú–∞–∫—Å. –ø–µ—Ä–µ—Ä–≤–∞</b> ‚Äî –Ω–∞–π–±—ñ–ª—å—à–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ –±–µ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.\n"
            "ü§è <b>–ö–æ—Ä–æ—Ç–∫—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</b> ‚Äî –≤—ñ–¥—Å–æ—Ç–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –º–µ–Ω—à–µ 5 —Ö–≤.\n"
        ),
        parse_mode="HTML"
    )
    await callback.answer()

async def send_reminders(bot: Bot):
    users = get_all_users()
    for user in users:
        user_id = user["user_id"]
        workouts = get_progress(user_id)

        if not workouts:
            await bot.send_message(user_id, "üëã –í–∏ —â–µ –Ω–µ –ø–æ—á–∞–ª–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å /workout, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!")
            continue

        last = workouts[0].get("timestamp")
        if last:
            last_dt = last.replace(tzinfo=timezone.utc)
            now = datetime.now(timezone.utc)
            if now - last_dt > timedelta(hours=24):
                await bot.send_message(
                    user_id,
                    "üì¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –≤–∏ –Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–ª–∏—Å—è –ø–æ–Ω–∞–¥ 24 –≥–æ–¥–∏–Ω–∏. –ü–æ—Ä–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å —É —Ñ–æ—Ä–º—É! üí™"
                )

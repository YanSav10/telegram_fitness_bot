import re
import asyncio
from datetime import datetime, timezone, timedelta
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.services import (
    save_user, save_workout_progress,
    get_user, check_achievements,
    get_all_users, get_progress
)
from bot.buttons import goal_buttons, control_buttons, resume_buttons
from bot.workouts import workout_plans
from bot.video_links import video_links

router = Router()

class Form(StatesGroup):
    goal = State()
    height = State()
    weight = State()
    age = State()
    workout_choice = State()
    workout = State()

paused_workouts = {}

def get_explanation_button(exercise_name: str):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üîç –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è",
            callback_data=f"explain:{exercise_name}"
        )
    ]])

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "*–ü—Ä–∏–≤—ñ—Ç, —è —Ç–≤—ñ–π —Ñ—ñ—Ç–Ω–µ—Å-–±–æ—Ç!*\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏ —ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏.\n"
        "–í–∏–±–µ—Ä–∏ –º–µ—Ç—É –Ω–∏–∂—á–µ ‚¨á",
        reply_markup=goal_buttons,
        parse_mode="Markdown"
    )
    await state.set_state(Form.goal)

@router.message(Form.goal, F.text.in_(["üî• –°—Ö—É–¥–Ω–µ–Ω–Ω—è", "üí™ –ù–∞–±—ñ—Ä –º–∞—Å–∏", "üèÉ –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", "‚ö° –°–∏–ª–∞"]))
async def process_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å *–∑—Ä—ñ—Å—Ç* (—É —Å–º):", parse_mode="Markdown")
    await state.set_state(Form.height)

@router.message(Form.goal)
async def invalid_goal(message: types.Message):
    await message.answer("‚ö† –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–µ—Ç–∏!", parse_mode="Markdown")

@router.message(Form.height, F.text.isdigit())
async def process_height(message: types.Message, state: FSMContext):
    height = int(message.text)
    if 100 <= height <= 250:
        await state.update_data(height=height)
        await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å *–≤–∞–≥—É* (—É –∫–≥):", parse_mode="Markdown")
        await state.set_state(Form.weight)
    else:
        await message.answer("‚ùå –†–µ–∞–ª—å–Ω–∏–π –∑—Ä—ñ—Å—Ç: 100‚Äì250 —Å–º", parse_mode="Markdown")

@router.message(Form.height)
async def invalid_height(message: types.Message):
    await message.answer("üö´ –í–≤–µ–¥–∏ *—á–∏—Å–ª–æ* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 175).", parse_mode="Markdown")

@router.message(Form.weight, F.text.isdigit())
async def process_weight(message: types.Message, state: FSMContext):
    weight = int(message.text)
    if 30 <= weight <= 200:
        await state.update_data(weight=weight)
        await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å *–≤—ñ–∫*:", parse_mode="Markdown")
        await state.set_state(Form.age)
    else:
        await message.answer("‚ùå –†–µ–∞–ª—å–Ω–∞ –≤–∞–≥–∞: 30‚Äì200 –∫–≥", parse_mode="Markdown")

@router.message(Form.weight)
async def invalid_weight(message: types.Message):
    await message.answer("üö´ –í–≤–µ–¥–∏ *—á–∏—Å–ª–æ* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 70).", parse_mode="Markdown")

@router.message(Form.age, F.text.isdigit())
async def process_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if 10 <= age <= 100:
        await state.update_data(age=age)
        data = await state.get_data()
        user = message.from_user
        username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
        if not username:
            username = f"user_{user.id}"
        save_user(user.id, username, data["goal"], data["height"], data["weight"], age)
        await message.answer(
            f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
            f"üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* @{username}\n"
            f"üéØ *–ú–µ—Ç–∞:* {data['goal']}\n"
            f"üìè *–ó—Ä—ñ—Å—Ç:* {data['height']} —Å–º\n"
            f"‚öñ *–í–∞–≥–∞:* {data['weight']} –∫–≥\n"
            f"üéÇ *–í—ñ–∫:* {age} —Ä–æ–∫—ñ–≤\n\n"
            f"üîπ –í–≤–µ–¥–∏ /workout –¥–ª—è —Å—Ç–∞—Ä—Ç—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
            parse_mode="Markdown"
        )
        await state.clear()
    else:
        await message.answer("‚ùå –í—ñ–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 100 —Ä–æ–∫—ñ–≤", parse_mode="Markdown")

@router.message(Form.age)
async def invalid_age(message: types.Message):
    await message.answer("üö´ –í–≤–µ–¥–∏ *—á–∏—Å–ª–æ* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25).", parse_mode="Markdown")

@router.message(Command("workout"))
async def start_workout(message: types.Message, state: FSMContext):
    user_data = get_user(message.from_user.id)
    if not user_data:
        await message.answer("üö´ –í–∏ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥—ñ—Ç—å /start.")
        return

    goal = user_data["goal"]
    workouts = workout_plans[goal]["daily_workouts"]
    buttons = [[types.KeyboardButton(text=w.split("\n")[0].replace('üèã ', ''))] for w in workouts]
    workout_choice_buttons = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("üîπ –û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=workout_choice_buttons)
    await state.set_state(Form.workout_choice)

@router.message(Form.workout_choice)
async def process_workout_choice(message: types.Message, state: FSMContext):
    user_data = get_user(message.from_user.id)
    goal = user_data["goal"]
    workouts = workout_plans[goal]["daily_workouts"]
    selected_workout = next((w for w in workouts if message.text in w), None)

    if selected_workout:
        await state.update_data(workout=selected_workout, user_id=message.from_user.id)
        await message.answer(
            f"{selected_workout}\nüî¥ –°—Ç–∞—Ä—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫—É",
            reply_markup=control_buttons
        )
        await state.set_state(Form.workout)
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@router.message(Form.workout, F.text == "üî¥ –°—Ç–∞—Ä—Ç")
async def start_timer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    workout = data["workout"]
    user_id = data["user_id"]
    exercises = re.findall(r"‚úÖ (\d+) —Å–µ–∫ ([^\n]+) \(x(\d+)\)", workout)
    total_duration = 0

    paused_workouts[user_id] = {"paused": False, "stopped": False}

    for sec, exercise, repeat in exercises:
        sec, repeat = int(sec), int(repeat)
        for r in range(repeat):
            caption = f"üîπ <b>{exercise}</b> ‚Äî –ø—ñ–¥—Ö—ñ–¥ {r + 1}/{repeat}"
            await message.answer(
                caption,
                parse_mode="HTML",
                reply_markup=get_explanation_button(exercise)
            )

            # 2. –í–∏–≤—ñ–¥ –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
            timer_msg = await message.answer(
                f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {sec} —Å–µ–∫",
                parse_mode="HTML"
            )

            for i in range(sec, 0, -1):
                await asyncio.sleep(1)

                if paused_workouts[user_id]["stopped"]:
                    await message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
                    await state.clear()
                    paused_workouts.pop(user_id, None)
                    return

                while paused_workouts[user_id]["paused"]:
                    await asyncio.sleep(1)

                try:
                    await timer_msg.edit_text(
                        f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {i} —Å–µ–∫",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞–π–º–µ—Ä: {e}")

            total_duration += sec

            if r < repeat - 1:
                rest_msg = await message.answer("‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ 10 —Å–µ–∫")
                for i in range(10, 0, -1):
                    await asyncio.sleep(1)

                    if paused_workouts[user_id]["stopped"]:
                        await message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
                        await state.clear()
                        paused_workouts.pop(user_id, None)
                        return

                    while paused_workouts[user_id]["paused"]:
                        await asyncio.sleep(1)

                    try:
                        await rest_msg.edit_text(f"‚è∏Ô∏è –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ {i} —Å–µ–∫")
                    except Exception as e:
                        print(f"‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫: {e}")
                total_duration += 10

    save_workout_progress(user_id, workout, total_duration)
    achievements = check_achievements(user_id)
    achievement_text = "\n".join(
        [f"üèÖ *–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è!* {a}" for a in achievements]) if achievements else ""
    await message.answer(
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {total_duration // 60} —Ö–≤ {total_duration % 60} —Å–µ–∫\n{achievement_text}",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await state.clear()
    paused_workouts.pop(user_id, None)

@router.message(Form.workout, F.text == "‚èπ –°—Ç–æ–ø")
async def stop_workout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in paused_workouts:
        paused_workouts[user_id]["stopped"] = True
    else:
        await message.answer("‚õî –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–µ.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()

@router.message(Form.workout, F.text == "‚è∏Ô∏è –ü–∞—É–∑–∞")
async def pause_workout(message: types.Message):
    user_id = message.from_user.id
    if user_id in paused_workouts:
        paused_workouts[user_id]["paused"] = True
        await message.answer("‚è∏Ô∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–∞—É–∑—ñ. –ù–∞—Ç–∏—Å–Ω–∏ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.",
                             reply_markup=resume_buttons)
    else:
        await message.answer("‚ö† –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ.")

@router.message(Form.workout, F.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
async def resume_workout(message: types.Message):
    user_id = message.from_user.id
    if user_id in paused_workouts and paused_workouts[user_id]["paused"]:
        paused_workouts[user_id]["paused"] = False
        await message.answer("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!", reply_markup=control_buttons)
    else:
        await message.answer("‚ö† –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑ –Ω–µ –Ω–∞ –ø–∞—É–∑—ñ.")

@router.callback_query(F.data.startswith("explain:"))
async def explain_exercise_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    exercise = callback.data.split("explain:")[1]
    video_url = video_links.get(exercise)

    # –°—Ç–∞–≤–∏–º–æ –ø–∞—É–∑—É
    if user_id in paused_workouts:
        paused_workouts[user_id]["paused"] = True

    if video_url:
        await callback.message.answer(
            f"‚ñ∂Ô∏è –ü–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ <b>{exercise}</b>:\n<a href='{video_url}'>{video_url}</a>",
            parse_mode="HTML",
            disable_web_page_preview=False,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–ø—Ä–∞–≤—É",
                    callback_data="resume_exercise"
                )
            ]])
        )
    else:
        await callback.message.answer("‚ùå –í—ñ–¥–µ–æ –¥–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –ø–æ–∫–∏ —â–æ –≤—ñ–¥—Å—É—Ç–Ω—î.")
    await callback.answer()

@router.callback_query(F.data == "resume_exercise")
async def resume_exercise_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in paused_workouts:
        paused_workouts[user_id]["paused"] = False
        await callback.message.answer("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–ø—Ä–∞–≤—É!")
    await callback.answer()

@router.message(F.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å")
async def view_progress(message: types.Message):
    workouts = get_progress(message.from_user.id)
    if workouts:
        response = "üìú *–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:*\n\n"
        for w in workouts:
            timestamp = w.get("timestamp")
            duration = w.get("duration", 0)
            date_str = timestamp.strftime("%d.%m.%Y %H:%M") if timestamp else "–Ω–µ–≤—ñ–¥–æ–º–æ"
            response += f"‚Ä¢ {date_str} ‚Äî {duration // 60} —Ö–≤ {duration % 60} —Å–µ–∫\n"
        await message.answer(response, parse_mode="Markdown")
    else:
        await message.answer("üîï –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.")

async def send_reminders(bot: Bot):
    users = get_all_users()
    for user in users:
        user_id = user["user_id"]
        workouts = get_progress(user_id)

        if not workouts:
            await bot.send_message(user_id, "üëã –í–∏ —â–µ –Ω–µ –ø–æ—á–∞–ª–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å /workout, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!")
            continue

        last = workouts[0].get("timestamp")
        if last:
            last_dt = last.replace(tzinfo=timezone.utc)
            now = datetime.now(timezone.utc)
            if now - last_dt > timedelta(hours=24):
                await bot.send_message(
                    user_id,
                    "üì¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –≤–∏ –Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–ª–∏—Å—è –ø–æ–Ω–∞–¥ 24 –≥–æ–¥–∏–Ω–∏. –ü–æ—Ä–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å —É —Ñ–æ—Ä–º—É! üí™"
                )
